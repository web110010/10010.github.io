<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 110010 - Thoughts and Ideas</title>
    <link>https://www.110010.win/posts/</link>
    <description>Recent content in Posts on 110010 - Thoughts and Ideas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Jun 2023 18:30:43 +0930</lastBuildDate><atom:link href="https://www.110010.win/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A FizzBuzz Implentation</title>
      <link>https://www.110010.win/posts/a-fizzbuzz-implentation/</link>
      <pubDate>Wed, 28 Jun 2023 18:30:43 +0930</pubDate>
      
      <guid>https://www.110010.win/posts/a-fizzbuzz-implentation/</guid>
      <description>I have been thinking of learning golang for sometime now and decided that well an exercise such as fizzbuzz would be a great way to start familiarizing myself with the language.
What is FizzBuzz? Fizz buzz is a group word game for children to teach them about division. Players take turns to count incrementally, replacing any number divisible by three with the word fizz, and any number divisible by five with the word buzz.</description>
      <content:encoded><![CDATA[<p>I have been thinking of learning golang for sometime now and decided that well an exercise such as fizzbuzz would be a great way to start familiarizing myself with the language.</p>
<p><img loading="lazy" src="https://i.imgur.com/EjBUA2d.png#center" alt="golang"  />
</p>
<h2 id="what-is-fizzbuzz">What is FizzBuzz?</h2>
<blockquote>
<p>Fizz buzz is a group word game for children to teach them about
division. Players take turns to count incrementally, replacing any
number divisible by three with the word <em>fizz</em>, and any number divisible by five with the word <em>buzz</em>. — <a href="https://en.wikipedia.org/wiki/Fizz_buzz"><em>Wikipedia</em></a></p>
</blockquote>
<p>For Example, in a range 1-15, it will go like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="m">2</span>
</span></span><span class="line"><span class="cl">Fizz
</span></span><span class="line"><span class="cl"><span class="m">4</span>
</span></span><span class="line"><span class="cl">Buzz
</span></span><span class="line"><span class="cl">Fizz
</span></span><span class="line"><span class="cl"><span class="m">7</span>
</span></span><span class="line"><span class="cl"><span class="m">8</span>
</span></span><span class="line"><span class="cl">Fizz
</span></span><span class="line"><span class="cl">Buzz
</span></span><span class="line"><span class="cl"><span class="m">11</span>
</span></span><span class="line"><span class="cl">Fizz
</span></span><span class="line"><span class="cl"><span class="m">13</span>
</span></span><span class="line"><span class="cl"><span class="m">14</span>
</span></span><span class="line"><span class="cl">FizzBuzz</span></span></code></pre></div>
<p>Conventionally the range being 1-100.</p>
<h2 id="the-problem">The Problem</h2>
<p><em>Write a program that prints the numbers from 1 to 100. But for multiples
of three print “Fizz” instead of the number and for the multiples of
five print “Buzz”. For numbers which are multiples of both three and
five print “FizzBuzz”.</em></p>
<h2 id="my-solution">My Solution</h2>
<p>It is easy to build a simple fizzbuzz solution, doing a loop to 100 and hard coding divisibility checks like <code>if i%3 == 0</code>, but I want to generalize my code as much as possible. That is, make changing the inputs very easy without affecting the logic of the program.</p>
<p>Here is my solution:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Struct to map Number to String
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NumString</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">num</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">  <span class="nx">txt</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Range
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">rf</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">1</span>    <span class="c1">// Range First
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">rl</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span>  <span class="c1">// Range Last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// FizzBuzz Relations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">numfb</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">NumString</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="s">&#34;Fizz&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="s">&#34;Buzz&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fizz_buzz</span><span class="p">(</span><span class="nx">numfb</span><span class="p">,</span> <span class="nx">rf</span><span class="p">,</span> <span class="nx">rl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">fizz_buzz</span><span class="p">(</span><span class="nx">numfb</span> <span class="p">[]</span><span class="nx">NumString</span><span class="p">,</span> <span class="nx">rf</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">rl</span> <span class="kt">int</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">tempstr</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;&#34;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="o">:=</span> <span class="nx">rf</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">rl</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">element</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">numfb</span><span class="p">{</span> <span class="c1">// Go over all Relations and check divisibility
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">i</span><span class="o">%</span><span class="nx">element</span><span class="p">.</span><span class="nx">num</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">tempstr</span> <span class="o">+=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">txt</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">tempstr</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// Print number if no divisibility
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// Otherwise Print mapped txt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">tempstr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tempstr</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="observations">Observations</h3>
<ol>
<li>
<p>Using a struct instead of a map. I should have probably used a map instead, but really wanted to do this with a struct. I will say, it turned out better than I could have hoped for. The more I look at it, the more I think It should have used a map, but I will resist, this is my masterpiece.</p>
</li>
<li>
<p>On line <em>27</em>, the for loop uses <code>_</code> because and index value is not needed. Interesting design choice.</p>
</li>
<li>
<p><code>else</code> start the same line as I close the bracket for the if statement. I cannot place the else statement on the next line, that is a syntax error. If I think about it, it does make sense that the related else statement should be nested, but it does feel weird doing that, since i have a habit of placing the else statement on the next line. The 2 minutes I did not understand why this was happening, I felt very dumb.</p>
</li>
<li>
<p>There is no <em>output</em>. Wonder what happened to it, you are now gonna have to run it on your own to find out, if the <em>output</em> is correct or not.</p>
</li>
</ol>
<h2 id="closing-words">Closing words</h2>
<p>It was pretty fun writing this thing in golang. The documentation was full of great examples which made understanding the basics really easy. Probably one of the easiest languages to learn, if you know any other programming language.</p>
<p>I would say it is an above average implementation of fizzbuzz. It may not be the fastest, or the most generalized one, but this much is sure, if you look at it, it surely is an okay fizzbuzz implementation.</p>
<p>I do think there is still improvement that can be to this. I may comeback to this on a later date once I am more comfortable in the language.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Joys of a Tiling Window Manager</title>
      <link>https://www.110010.win/posts/joys-of-tiling-window-manager/</link>
      <pubDate>Fri, 23 Jun 2023 21:16:02 +0530</pubDate>
      
      <guid>https://www.110010.win/posts/joys-of-tiling-window-manager/</guid>
      <description>Tiling window managers and why you should consider using one.</description>
      <content:encoded><![CDATA[<p>I have been using tiling windows in some form or the other for a good part of 5 years now. Be it via  <em>GNOME extensions, Kwin tiling, Pop!OS tiling mode, i3, sway, bspwm, awesome</em>. Finally, I have set my self comfortably on sway.</p>
<p><img loading="lazy" src="https://i.imgur.com/PanwEhN.png" alt="lor_wow"  />
</p>
<h2 id="what-is-a-tiling-window-manager">What is a tiling window manager?</h2>
<p>A tiling window manager in simple terms is a organisation system, which organizes windows in a non overlapping way.</p>
<p>Basically when a new window is opened, it will re-arrange existing open windows depending on some pre-existing parameters.</p>
<p><img loading="lazy" src="https://i.imgur.com/e0pqol7l.png#center" alt="tiled_windows"  />
</p>
<h2 id="what-makes-a-tiling-window-manager-so-special">What makes a tiling window manager so special</h2>
<p>In one word if I have to explain it, then I would say <strong>personalization</strong>. it places all the regular apps some one would use in a predetermined manner as set by the user. I just press the keyboard shortcut/ open the program and it will place itself exactly where I want every single time without fault.</p>
<h3 id="virtual-desktops">Virtual Desktops</h3>
<p>Virtual Desktops (or Workspaces) is what truly makes them special, they make sure that I can have multiple programs open without having them too small, all full size if I want. I don&rsquo;t need to <code>alt-tab</code> for switching programs, I can just press <code>$mod4+&lt;Workspace&gt;</code>  (<code>$mod4</code> being the windows/command key) according to my configuration, just shift to the program I want. No need to <code>alt+tab</code> till I find the program I&rsquo;m looking for.</p>
<h3 id="floating-windows-are-allowed">Floating windows are allowed</h3>
<p>There are some programs/windows you would always want to float/stack. Almost all modern tiling window managers allow this functionality. You can pre configure certain programs/ windows to appear in a floating format, or have any or all programs turn floating with a simple shortcut.</p>
<p><img loading="lazy" src="https://i.imgur.com/5SLzAFm.png" alt="floating_window"  />
</p>
<h2 id="why-i-like-it-so-much">Why I like it so much</h2>
<p>If I have to say it in a few words, then I would say that it is because that the default behavior of having windows tiled rather than stacked is much more desirable to me.</p>
<p>I don&rsquo;t have to go around stacking windows left and right every time I have to have multiple windows open on the same screen. I feel so much more at ease this way, I don&rsquo;t have to worry about window management and can just focus on my work.</p>
<p>Another important factor is that it makes you feel proud, because it is something you have built, line-by-line. A certain windows open a certain somewhere in the way defined it to open, that just brings a little smile to the face.</p>
<h2 id="try-it">Try it</h2>
<p>If you haven&rsquo;t tried a <em>tiling window manager</em> before, you should give it a go. You will discover a whole new world of window management. It is truly an amazing experience one must experience, even if it doesn&rsquo;t turn out the more comfortable option for them. If you don&rsquo;t like it you can always go back to whatever you were using before.</p>
<p><strong>For the best possible experience, with minimum configuration needed</strong>, I highly recommend EndeavourOS-i3wm. Endeavour OS is a arch based linux distro. The way they have riced (act of customizing the operating system), it is just so beautiful. It truly is one of the best ways to experience i3wm (<strong>The best window manager, fight me</strong>). I have copied a lot of things from their i3 skin, even as I moved distros and window managers.</p>
<p><img loading="lazy" src="https://i.imgur.com/NFKJZb8.png" alt="endeavourOS-i3wm"  />
</p>
<p><a href="https://endeavouros.com/latest-release/"><em>Click here for download page</em></a></p>
<p><em><strong>Note</strong>: Try in VM before installing any OS/WM directly on your computer.</em></p>
<h3 id="windowsmacos">Windows/MacOS</h3>
<p>If you are on Windows or MacOS and don&rsquo;t want to change your OS you have nothing to worry, their are options for you too. Here are some I found, do look at reviews before trying them out.</p>
<p><em><strong>Note</strong>: Try in VM before installing any OS/WM directly on your computer.</em></p>
<p>Windows:</p>
<ol>
<li>
<p><a href="https://github.com/LGUG2Z/komorebi/">komorebi: A tiling window manager for Windows</a></p>
</li>
<li>
<p><a href="https://github.com/lars-berger/GlazeWM">GlazeWM: A tiling window manager for Windows inspired by i3 and Polybar.</a></p>
</li>
<li>
<p><a href="https://www.nurgo-software.com/products/aquasnap">AquaSnap Window Manager: dock, snap, tile, organize</a></p>
</li>
</ol>
<p>MacOS:</p>
<ol>
<li>
<p><a href="https://github.com/koekeishiya/yabai">yabai: A tiling window manager for macOS based on binary space partitioning</a></p>
</li>
<li>
<p><a href="https://github.com/ianyh/Amethyst">Amethyst: Automatic tiling window manager for macOS à la xmonad.</a></p>
</li>
</ol>
<p>So, what are you waiting for? Go wild, try out a tiling window manager, discover a whole new way of doing something and the most important thing of all, enjoy your time doing it.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://www.110010.win/posts/firstpost/</link>
      <pubDate>Mon, 19 Jun 2023 09:44:32 +0530</pubDate>
      
      <guid>https://www.110010.win/posts/firstpost/</guid>
      <description>This is my first post now and I do think this is going to be a journey.
Only time will tell where this voyage will take me. I hope as I do look at this post years later I will remember this post fondly. I hope to records some great records and maybe put out my thoughts and ideas about various things.
I wish this blog does turn itself into something and take a form of it own.</description>
      <content:encoded><![CDATA[<p>This is my first post now and I do think this is going to be a journey.</p>
<p>Only time will tell where this voyage will take me. I hope as I do look at this post years later I will remember this post fondly. I hope to records some great records and maybe put out my thoughts and ideas about various things.</p>
<p>I wish this blog does turn itself into something and take a form of it own.</p>
<p>So lets start this journey!</p>
<p><img loading="lazy" src="https://images.unsplash.com/photo-1476820865390-c52aeebb9891?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80" alt="journey"  />


<div style="text-align: center;">
	<i>
      <a href="https://unsplash.com/@impatrickt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Patrick Tomasso</a>
      on
      <a href="https://unsplash.com/photos/5hvn-2WW6rY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">
      Unsplash</a></i>
	
</div></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
